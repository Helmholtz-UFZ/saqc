varname    	; test
#---------------;---------------------------------------
level      	; flagRange(min=0)
water_temp 	; flagRange(min=-.5)
sak254 	   	; flagRange(min=0, max=70)
turbidity  	; flagRange(min=0, max=140)
level      	; linear(freq='15min')
water_temp 	; linear(freq='15min')
sak254 	   	; linear(freq='15min')
turbidity  	; linear(freq='15min')
sak254 	   	; correctDrift(target='sak254_corr', maintenance_field='maint', model=expDriftModel)
turbidity  	; correctDrift(target='turbidity_corr', maintenance_field='maint', model=expDriftModel)
sak254 	   	; flagManual(mdata='maint')
sak254_corr	; flagManual(mdata='maint')
turbidity  	; flagManual(mdata='maint')
turbidity_corr  ; flagManual(mdata='maint')
level      	; interpolateInvalid('linear', limit=2)
water_temp 	; interpolateInvalid('linear', limit=2)
sak254 	   	; interpolateInvalid('linear', limit=2)
turbidity  	; interpolateInvalid('linear', limit=2)
level 	   	; transform(target='norm_level', func='zNorm', freq='20D')
sac_corr   	; transform(target='norm_SAK', func='zNorm', freq='20D')
turbidity_corr 	; transform(target='norm_turbidity_corr', func='zNorm', freq='20D')
water_temp 	; transform('norm_water_temp', func='zNorm', freq='20D')
norm_level, norm_sac_corr, norm_turbidity_corr, norm_water_temp ; scores.assignKNNScore(targe='kNN_scores', freq='20D')
kNN_scores 	; outliers.flagByStray(freq='20D')
level, sac_corr, turbidity_corr, water_temp;generic.projectFlags(source='kNNscores', 'match')
# undo interpolation resampling
level 			; generic.projectFlags(source='level_original', 'inverse_interpolation')
sac_corr 		; generic.projectFlags(source='sac_original', 'inverse_interpolation')
turbidity_corr 	; generic.projectFlags(source='turbidity_original', 'inverse_interpolation')
water_temp 		; generic.projectFlags(source='water_temp_original', 'inverse_interpolation')





